{"mappings":"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","sources":["index.ts"],"sourcesContent":["const bitcoin = require(\"bitcoinjs-lib\");\r\nimport { chains, toBitcoinJS } from \"@hyperbitjs/chains\";\r\n\r\n// UTXO model for inputs to be signed\r\ninterface IUTXO {\r\n  address: string;         // Address that holds the UTXO\r\n  assetName: string;       // Name of the asset \r\n  txid: string;            // Transaction ID of the UTXO\r\n  outputIndex: number;     // Output index in the original transaction\r\n  script: string;          // Hex-encoded scriptPubKey (from the UTXO)\r\n  satoshis: number;        // Amount in satoshis\r\n  height?: number;         // Optional block height\r\n  value: number;           // Same as satoshis (can be used for clarity)\r\n}\r\n\r\n/**\r\n * Signs a raw, unsigned transaction using provided UTXOs and private keys.\r\n * Supports Ravencoin and Evrmore transactions, including asset transfers.\r\n * Uses bitcoinjs-lib's Transaction class directly for full script control.\r\n *\r\n * @param network - The blockchain network: 'rvn', 'rvn-test', 'evr', or 'evr-test'\r\n * @param rawTransactionHex - The raw hex of the unsigned transaction\r\n * @param UTXOs - List of UTXOs referenced by the inputs in the transaction\r\n * @param privateKeys - Object mapping addresses to their corresponding WIF private keys\r\n * @returns The signed transaction in hex format\r\n */\r\nexport function sign(\r\n  network: \"rvn\" | \"rvn-test\" | \"evr\" | \"evr-test\",\r\n  rawTransactionHex: string,\r\n  UTXOs: Array<IUTXO>,\r\n  privateKeys: Record<string, string>\r\n): string {\r\n  // Get bitcoinjs-lib-compatible network parameters\r\n  const networkMapper = {\r\n    rvn: chains.rvn.main,\r\n    \"rvn-test\": chains.rvn.test,\r\n    evr: chains.evr.main,\r\n    \"evr-test\": chains.evr.test,\r\n  };\r\n\r\n  const coin = networkMapper[network];\r\n  if (!coin) {\r\n    throw new Error(\"Invalid network specified\");\r\n  }\r\n\r\n  // Convert to bitcoinjs-lib network format\r\n  // @ts-ignore because toBitcoinJS returns a compatible structure\r\n  const RAVENCOIN = toBitcoinJS(coin);\r\n\r\n  // Parse the unsigned transaction\r\n  const unsignedTx = bitcoin.Transaction.fromHex(rawTransactionHex);\r\n  const tx = new bitcoin.Transaction();\r\n\r\n  tx.version = unsignedTx.version;\r\n  tx.locktime = unsignedTx.locktime;\r\n\r\n  // Helper to look up the correct private key by address\r\n  function getKeyPairByAddress(address: string) {\r\n    const wif = privateKeys[address];\r\n    if (!wif) throw new Error(`Missing private key for address: ${address}`);\r\n    return bitcoin.ECPair.fromWIF(wif, RAVENCOIN);\r\n  }\r\n\r\n  // Helper to find the correct UTXO for an input\r\n  function getUTXO(txid: string, vout: number): IUTXO | undefined {\r\n    return UTXOs.find((u) => u.txid === txid && u.outputIndex === vout);\r\n  }\r\n\r\n  // Add all inputs to the new transaction using the actual scriptPubKey from the UTXO\r\n  for (let i = 0; i < unsignedTx.ins.length; i++) {\r\n    const input = unsignedTx.ins[i];\r\n    const txid = Buffer.from(input.hash).reverse().toString(\"hex\");\r\n    const vout = input.index;\r\n\r\n    const utxo = getUTXO(txid, vout);\r\n    if (!utxo) {\r\n      throw new Error(`Missing UTXO for input ${txid}:${vout}`);\r\n    }\r\n\r\n    const script = Buffer.from(utxo.script, \"hex\");\r\n\r\n    // Add input with the correct scriptPubKey\r\n    tx.addInput(Buffer.from(input.hash), input.index, input.sequence, script);\r\n  }\r\n\r\n  // Copy all outputs from the unsigned transaction\r\n  for (const out of unsignedTx.outs) {\r\n    tx.addOutput(out.script, out.value);\r\n  }\r\n\r\n  // Sign each input manually\r\n  for (let i = 0; i < tx.ins.length; i++) {\r\n    const input = tx.ins[i];\r\n    const txid = Buffer.from(input.hash).reverse().toString(\"hex\");\r\n    const vout = input.index;\r\n\r\n    const utxo = getUTXO(txid, vout);\r\n    if (!utxo) {\r\n      throw new Error(`Missing UTXO for input ${txid}:${vout}`);\r\n    }\r\n\r\n    const keyPair = getKeyPairByAddress(utxo.address);\r\n\r\n    // Compute the sighash (message to be signed)\r\n    const sighash = tx.hashForSignature(\r\n      i,\r\n      Buffer.from(utxo.script, \"hex\"),\r\n      bitcoin.Transaction.SIGHASH_ALL\r\n    );\r\n\r\n    // Sign the hash\r\n    const signature = bitcoin.script.signature.encode(\r\n      keyPair.sign(sighash),\r\n      bitcoin.Transaction.SIGHASH_ALL\r\n    );\r\n\r\n    const pubKey = keyPair.publicKey;\r\n\r\n    // Build the unlocking script (scriptSig) manually: <signature> <pubKey>\r\n    const scriptSig = bitcoin.script.compile([signature, pubKey]);\r\n\r\n    // Attach the scriptSig to the input\r\n    tx.setInputScript(i, scriptSig);\r\n  }\r\n\r\n  // Return the signed transaction as hex\r\n  return tx.toHex();\r\n}\r\n\r\nexport default {\r\n  sign,\r\n};\r\n"],"names":[],"version":3,"file":"index.mjs.map"}